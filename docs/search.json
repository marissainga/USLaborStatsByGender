[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "US Labor Stats By Gender",
    "section": "",
    "text": "1 Introduction\nIn discussions about wage disparity, the statistic that women make 77 cents on the dollar vs men is consistently cited. However, at such a high level, this statistic fails to address trends, facets, and stories about the underlying data. For example, how do factors like childcare, time spent doing housework, and occupation type affect the statistics? We strongly feel that the intersectionalities of (1) gender and familial responsibilities, (2) gender and occupation, and (3) gender and ethnicity have interesting (and potentially devastating) dynamics with regards to labor outcomes that are not illuminated by the simple “77 cent on the dollar” statistic. Thus for our final project, we will be exploring the effects of gender, familial status, ethnicity, and occupation types on labor outcomes, in order to unearth insights into what makes up this “77 cents on the dollar” claim. We will be using data from nationwide surveys conducted by the Bureau of Labor Statistics for our analysis. These surveys contain measures of interest such as the aggregate employment status of the population by sex, marital status, and presence/age of children under 18, wage and salary of women and men by major occupational groups, and earnings by gender and ethnicity.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nFor this project, we will draw on several key datasets from the U.S. Bureau of Labor Statistics (BLS). BLS is a federal agency that collects and disseminates various data about the U.S. economy and labor market.\nThe main dataset we will use comes out of the Current Population Survey (CPS). The CPS is a monthly survey conducted by the U.S. Census Bureau on behalf of the BLS, collecting data from approximately 60,000 eligible households across the United States. It provides detailed information on employment, earnings, demographic characteristics, and other labor market factors. Data is gathered through household interviews using a rotating panel design to ensure both consistency and coverage of the U.S. civilian noninstitutional population aged 16 and older. The CPS data includes a rich set of variables, such as employment status, wages, hours worked, and demographic factors like gender, ethnicity, and family structure (https://www.bls.gov/cps/earnings-faqs.htm#blscensus). The data we are looking at is aggregated yearly.\nWe will also use data from the the American Time Use Survey (ATUS). ATUS is a national survey conducted by BLS that collects data on how people aged 15 and older allocate their time across various activities, such as work, leisure, and household chores, through a 24-hour time diary recall to better understand patterns of time use across different demographic groups. This is also aggregated yearly at (https://www.bls.gov/tus/documents.htm)\nBoth datasets several limitations, including nonresponse bias, misclassification of employment status, and recall bias due to reliance on self-reporting. Additionally, CPS struggles with accurately capturing nontraditional employment, has limited detail on job quality, and may be affected by changes in methodology and question design over time, which complicates long-term comparisons.\nThese datasets are both available through the BLS data finder (https://www.bls.gov/data/tools.htm). We have decided to save the data from the BLS site as CSVs and import into R for this project.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\n# Add libraries and read in data\nlibrary(readr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(naniar)   # For missing data visualization and summaries\nlibrary(visdat)\nlibrary(ggplot2)\n\n\natusAllGroups2023 &lt;- read_csv(\"data/atusAllGroups2023.csv\", show_col_types = FALSE)\n\nMedianWeeklyEarningByPresenceOfChildren &lt;- read_csv(\"data/MedianWeeklyEarningByPresenceOfChildrenTable7.csv\", show_col_types = FALSE)\nMedianWeeklyEarningByRace &lt;- read_csv(\"data/MedianWeeklyEarningByRaceTable18.csv\", show_col_types = FALSE)\nMedianWeeklyEarningsByGenderEducation &lt;- read_csv(\"data/MedianWeeklyEarningsByGenderEducationTable24.csv\", show_col_types = FALSE)\nMedianHourlyEarningsHispanicByAge &lt;- read_csv(\"data/MedianHourlyEarningsHispanicByAgeTable25.csv\", show_col_types = FALSE)\nMedianHoursWorkedByRaceGender &lt;- read_csv(\"data/MedianHoursWorkedByRaceGenderTable26.csv\", show_col_types = FALSE)\n\nMedianWeeklyEarningsByOccupation &lt;- read_csv(\"data/MedianWeeklyEarningsByOccupation.csv\", show_col_types = FALSE)\nMedianWeeklyEarningsByOccupationAggregate &lt;- read_csv(\"data/MedianWeeklyEarningsByOccupationAggregate.csv\", show_col_types = FALSE)\n\nMedianWeeklyEarningsByMaritalStatus &lt;- read_csv(\"data/MedianWeeklyEarningsByMaritalStatus.csv\", show_col_types = FALSE)\n\n\nNew names:\n• `` -&gt; `...8`\n\n\n\n\nCode\nlibrary(patchwork)\n\nATUS2023Missing &lt;- gg_miss_var(atusAllGroups2023) + ggtitle(\"ATUS2023\") + theme(plot.title = element_text(size = 7, hjust = 0.5))\n\nMedianWeeklyEarningByPresenceOfChildrenMissing &lt;- gg_miss_var(MedianWeeklyEarningByPresenceOfChildren) + ggtitle(\"MedianWeeklyEarningByPresenceOfChildrenMissing\") + theme(plot.title = element_text(size = 7, hjust = 0.5))\n\nMedianWeeklyEarningByRaceMissing &lt;- gg_miss_var(MedianWeeklyEarningByRace) + ggtitle(\"MedianWeeklyEarningByRace\") + theme(plot.title = element_text(size = 7, hjust = 0.5))\n\nMedianWeeklyEarningsByGenderEducationMissing &lt;- gg_miss_var(MedianWeeklyEarningsByGenderEducation) + ggtitle(\"MedianWeeklyEarningsByGenderEducationMissing\") + theme(plot.title = element_text(size = 7, hjust = 0.5))\n\nMedianHourlyEarningsHispanicByAgeMissing &lt;- gg_miss_var(MedianHourlyEarningsHispanicByAge) + ggtitle(\"MedianHourlyEarningsHispanicByAgeMissing\") + theme(plot.title = element_text(size = 7, hjust = 0.5))\n\nMedianHoursWorkedByRaceGenderMissing &lt;- gg_miss_var(MedianHoursWorkedByRaceGender) + ggtitle(\"MedianHoursWorkedByRaceGender\") + theme(plot.title = element_text(size = 7, hjust = 0.5))\n\nfirstThird &lt;- (ATUS2023Missing | MedianWeeklyEarningByPresenceOfChildrenMissing)\nsecondThird &lt;- (MedianWeeklyEarningByRaceMissing | MedianWeeklyEarningsByGenderEducationMissing)\nthirdThird &lt;- (MedianHourlyEarningsHispanicByAgeMissing | MedianHoursWorkedByRaceGenderMissing)\n\n( firstThird/ secondThird/ thirdThird) + plot_annotation(title=\"Missing Value Frequencies Across Datasets in Use\")\n\n\n\n\n\n\n\n\n\ngg_miss_varcan help us visualize the frequency of missing data. For most datasets we see no missing data. The exception is for the MedianWeeklyEarningByRace and MedianHoursWorkedByRaceGender sets. Below, we plot this out and see BLS only started including the Asian group in the Current Population Survey in 2000, vs started with the rest in 1979.\n\n\nCode\n# Plot \"Asian\" variable by \"Year\"\nggplot(MedianWeeklyEarningByRace, aes(x = Year, y = Asian)) +\n  geom_line(color = \"blue\", size = 1) +  # Line plot, blue color\n  geom_point(color = \"red\") +             # Optional: Add points for each year\n  labs(title = \"Median Weekly Earnings for Asian Group by Year\",\n       x = \"Year\",\n       y = \"Median Weekly Earnings (Asian)\") +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 42 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\nWarning: Removed 42 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode\nggplot(MedianHoursWorkedByRaceGender, aes(x = Year, y = Asian)) +\n  geom_line(color = \"blue\", size = 1) +  # Line plot, blue color\n  geom_point(color = \"red\") +             # Optional: Add points for each year\n  labs(title = \"Median Hours Worked By for Asian Group By Year\",\n       x = \"Year\",\n       y = \"Median Hours Worked (Asian)\") +\n  theme_minimal()\n\n\nWarning: Removed 42 rows containing missing values or values outside the scale range\n(`geom_line()`).\nRemoved 42 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Outline:\n\nsay something like the most important thing is the occupation difference\n\n\nstart with the Total Earnings by Gender and Occupation Group plot? (hard plot 1)\nis the box plot relevant or am i just trying to get another plot\ni like the clevland dot plot / bar chart under it showing the men and women differences (hard plot 2)\nshow some combo of the most popular jobs by imbalance / most popular jobs by gender\n\nthis might be something we just show the table for, feel interesting for the reader\nwe can also skip completely\n\nend with the scatter plot that shows jobs with the 45 degree line in the middle (hard plot 3)\n\n\nanother large finding is child and marital status\n\n\nshow the overall marital one first (hard plot 4)\nWomen’s Median Weekly Earnings as Percentage of Men’s Earnings by Children Status next\n\nneed to be careful about this one, its not so clear cut (hard plot 5)\n\nthen the one that shows the percent of day breakdown (hard plot 6)\n\n\ncomment on data we have over time\n\n\ntime series with race, education status? (make those breaks in the series for recessions also)\nmaybe map plot if we dont do the one below?\n\nstill need to add an interactive component – maybe something like this showing wages over time? i still havent really looked much how d3 works, so may need to do something else https://nwlc.org/resource/wage-gap-state-by-state/\nhard plot = we should def include these\n\n\nCode\n# Add libraries and read in data\nlibrary(readr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(naniar)   # For missing data visualization and summaries\nlibrary(visdat)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(ggmosaic)\n\n\natusAllGroups2023 &lt;- read_csv(\"data/atusAllGroups2023.csv\", show_col_types = FALSE)\n\nMedianWeeklyEarningByPresenceOfChildren &lt;- read_csv(\"data/MedianWeeklyEarningByPresenceOfChildrenTable7.csv\", show_col_types = FALSE)\nMedianWeeklyEarningByRace &lt;- read_csv(\"data/MedianWeeklyEarningByRaceTable18.csv\", show_col_types = FALSE)\nMedianWeeklyEarningsByGenderEducation &lt;- read_csv(\"data/MedianWeeklyEarningsByGenderEducationTable24.csv\", show_col_types = FALSE)\nMedianHourlyEarningsHispanicByAge &lt;- read_csv(\"data/MedianHourlyEarningsHispanicByAgeTable25.csv\", show_col_types = FALSE)\nMedianHoursWorkedByRaceGender &lt;- read_csv(\"data/MedianHoursWorkedByRaceGenderTable26.csv\", show_col_types = FALSE)\n\nMedianWeeklyEarningsByOccupation &lt;- read_csv(\"data/MedianWeeklyEarningsByOccupation.csv\", show_col_types = FALSE)\nMedianWeeklyEarningsByOccupationAggregate &lt;- read_csv(\"data/MedianWeeklyEarningsByOccupationAggregate.csv\", show_col_types = FALSE)\n\nMedianWeeklyEarningsByMaritalStatus &lt;- read_csv(\"data/MedianWeeklyEarningsByMaritalStatus.csv\", show_col_types = FALSE)\n\n\nNew names:\n• `` -&gt; `...8`\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Assuming data is loaded into MedianWeeklyEarningsByOccupation\ndata &lt;- MedianWeeklyEarningsByOccupation\n\n# Clean data by removing NA values for men's and women's earnings\ndata_clean &lt;- data %&gt;%\n  filter(!is.na(men_median_weekly_earnings) & !is.na(women_median_weekly_earnings)) %&gt;%\n  mutate(\n    wage_gap = (women_median_weekly_earnings / men_median_weekly_earnings) * 100\n  )\n\n# Top 15 Occupations by Number of Women Workers (sorted by number of workers)\ntop_15_women &lt;- data_clean %&gt;%\n  arrange(desc(women_number_of_workers)) %&gt;%\n  head(15) %&gt;%\n  mutate(occupation = factor(occupation, levels = rev(occupation))) %&gt;%\n  select(occupation, women_number_of_workers, wage_gap)\n\n# Top 15 Occupations by Number of Men Workers (sorted by number of workers)\ntop_15_men &lt;- data_clean %&gt;%\n  arrange(desc(men_number_of_workers)) %&gt;%\n  head(15) %&gt;%\n  mutate(occupation = factor(occupation, levels = rev(occupation))) %&gt;%\n  select(occupation, men_number_of_workers, wage_gap)\n\n# Plot for Top 15 Occupations by Women Workers (sorted by number of workers)\np1 &lt;- ggplot(top_15_women, aes(x = occupation, y = wage_gap, fill = wage_gap)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(wage_gap, 1), \"%\")), \n            vjust = 0.5, color = \"white\", fontface = \"bold\") +  # Add labels inside bars\n  coord_flip() + # Flip the axes for readability\n  labs(\n    title = \"Wage Gap for Top 15 Occupations by Number of Women Workers\",\n    x = \"Occupation\",\n    y = \"Wage Gap (%)\"\n  ) +\n  scale_fill_gradient(low = \"red\", high = \"blue\") +  # Red for lower wage gap, Green for higher wage gap\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n# Plot for Top 15 Occupations by Men Workers (sorted by number of workers)\np2 &lt;- ggplot(top_15_men, aes(x = occupation, y = wage_gap, fill = wage_gap)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(wage_gap, 1), \"%\")), \n            vjust = 0.5, color = \"white\", fontface = \"bold\") +  # Add labels inside bars\n  coord_flip() + # Flip the axes for readability\n  labs(\n    title = \"Wage Gap for Top 15 Occupations by Number of Men Workers\",\n    x = \"Occupation\",\n    y = \"Wage Gap (%)\"\n  ) +\n  scale_fill_gradient(low = \"red\", high = \"blue\") +  # Red for lower wage gap, Green for higher wage gap\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n# Print both plots\np1\n\n\n\n\n\n\n\n\n\nCode\np2\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Assuming data is loaded into MedianWeeklyEarningsByOccupation\ndata &lt;- MedianWeeklyEarningsByOccupation\n\n# Clean data by removing NA values for men's and women's earnings\ndata_clean &lt;- data %&gt;%\n  filter(!is.na(men_median_weekly_earnings) & !is.na(women_median_weekly_earnings)) %&gt;%\n  mutate(\n    wage_gap = (women_median_weekly_earnings / men_median_weekly_earnings) * 100,\n    women_men_ratio = women_number_of_workers / men_number_of_workers,  # Women-to-Men Ratio\n    men_women_ratio = men_number_of_workers / women_number_of_workers   # Men-to-Women Ratio\n  )\n\n# Top 15 Occupations with the Highest Women-to-Men Workers Ratio (sorted by ratio)\ntop_15_women_imbalance &lt;- data_clean %&gt;%\n  arrange(desc(women_men_ratio)) %&gt;%\n  head(15) %&gt;%\n  mutate(occupation = factor(occupation, levels = rev(occupation))) %&gt;%\n  select(occupation, women_men_ratio, wage_gap)\n\n# Top 15 Occupations with the Highest Men-to-Women Workers Ratio (sorted by ratio)\ntop_15_men_imbalance &lt;- data_clean %&gt;%\n  arrange(desc(men_women_ratio)) %&gt;%\n  head(15) %&gt;%\n  mutate(occupation = factor(occupation, levels = rev(occupation))) %&gt;%\n  select(occupation, men_women_ratio, wage_gap)\n\n# Plot for Top 15 Occupations with the Highest Women-to-Men Workers Ratio (sorted by ratio)\np1 &lt;- ggplot(top_15_women_imbalance, aes(x = occupation, y = wage_gap, fill = wage_gap)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(wage_gap, 1), \"%\")), \n            vjust = 0.5, color = \"white\", fontface = \"bold\") +  # Add labels inside bars\n  coord_flip() + # Flip the axes for readability\n  labs(\n    title = \"Wage Gap for Top 15 Occupations with the Highest Women-to-Men Workers Ratio\",\n    x = \"Occupation\",\n    y = \"Wage Gap (%)\"\n  ) +\n  scale_fill_gradient(low = \"red\", high = \"blue\") +  # Red for lower wage gap, Green for higher wage gap\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n# Plot for Top 15 Occupations with the Highest Men-to-Women Workers Ratio (sorted by ratio)\np2 &lt;- ggplot(top_15_men_imbalance, aes(x = occupation, y = wage_gap, fill = wage_gap)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(wage_gap, 1), \"%\")), \n            vjust = 0.5, color = \"white\", fontface = \"bold\") +  # Add labels inside bars\n  coord_flip() + # Flip the axes for readability\n  labs(\n    title = \"Wage Gap for Top 15 Occupations with the Highest Men-to-Women Workers Ratio\",\n    x = \"Occupation\",\n    y = \"Wage Gap (%)\"\n  ) +\n  scale_fill_gradient(low = \"red\", high = \"blue\") +  # Red for lower wage gap, Green for higher wage gap\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n# Print both plots\np1\n\n\n\n\n\n\n\n\n\nCode\np2\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Assuming you have a dataset like MedianWeeklyEarningsByOccupation\ndata &lt;- MedianWeeklyEarningsByOccupation\n\n# Clean data by removing rows with NA values for median earnings\ndata_clean &lt;- data %&gt;%\n  filter(!is.na(men_median_weekly_earnings) & !is.na(women_median_weekly_earnings))\n\n# Convert data to long format for ggplot (necessary for making boxplots)\ndata_long &lt;- data_clean %&gt;%\n  select(occupation_group_major, occupation, men_median_weekly_earnings, women_median_weekly_earnings) %&gt;%\n  pivot_longer(cols = c(men_median_weekly_earnings, women_median_weekly_earnings),\n               names_to = \"gender\", \n               values_to = \"median_weekly_earnings\") %&gt;%\n  mutate(gender = ifelse(gender == \"men_median_weekly_earnings\", \"Men\", \"Women\"))\n\n# Identify outliers (values outside the whiskers)\ncalculate_outliers &lt;- function(x) {\n  # Calculate Q1, Q3, and IQR\n  Q1 &lt;- quantile(x, 0.25, na.rm = TRUE)\n  Q3 &lt;- quantile(x, 0.75, na.rm = TRUE)\n  IQR &lt;- Q3 - Q1\n  \n  # Define lower and upper bounds for outliers\n  lower_bound &lt;- Q1 - 1.5 * IQR\n  upper_bound &lt;- Q3 + 1.5 * IQR\n  \n  # Identify outliers\n  outliers &lt;- x[x &lt; lower_bound | x &gt; upper_bound]\n  return(outliers)\n}\n\n# Create a new column to mark outliers for labeling\noutlier_data &lt;- data_long %&gt;%\n  group_by(gender) %&gt;%\n  mutate(is_outlier = median_weekly_earnings %in% calculate_outliers(median_weekly_earnings))\n\n# Create boxplot of median weekly earnings for Men and Women with outlier labels (by occupation)\nggplot(data_long, aes(x = gender, y = median_weekly_earnings, fill = gender)) +\n  geom_boxplot() +\n  geom_text(data = outlier_data %&gt;% filter(is_outlier), \n            aes(label = occupation),\n            position = position_jitter(width = 0.1),  # Slightly jitter outlier labels to avoid overlap\n            color = \"black\", fontface = \"bold\", size = 3) +\n  labs(\n    title = \"Distribution of Median Weekly Earnings by Gender with Outliers Labeled (by Occupation)\",\n    x = \"Gender\",\n    y = \"Median Weekly Earnings (USD)\"\n  ) +\n  scale_fill_manual(values = c(\"blue\", \"pink\")) +  # Customize boxplot colors\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 12),\n        axis.text.y = element_text(size = 12),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14))\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(plotly)\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nCode\nlibrary(dplyr)\n\n# Clean the data\ndata_clean &lt;- MedianWeeklyEarningsByOccupation |&gt;\n  filter(total_number_of_workers &gt;= 15, \n         !is.na(men_median_weekly_earnings) & !is.na(women_median_weekly_earnings))\n\n# Create the scatter plot using plot_ly\nplot_ly(data = data_clean, \n        x = ~men_median_weekly_earnings, \n        y = ~women_median_weekly_earnings, \n        type = 'scatter', \n        mode = 'markers', \n        text = ~occupation,  # Hover text with occupation names\n        hoverinfo = 'text',  # Show only occupation on hover\n        color = ~occupation_group_major,  # Color by occupation group\n        colors = c(\"red\", \"blue\", \"green\", \"orange\"),  # Specify colors for groups\n        marker = list(size = 10, opacity = 0.7)) %&gt;%\n  layout(\n    title = \"Men vs. Women Median Weekly Earnings by Occupation\",\n    xaxis = list(title = \"Men's Median Weekly Earnings ($)\"),\n    yaxis = list(title = \"Women's Median Weekly Earnings ($)\"),\n    shapes = list(\n      # Add 45-degree line (y = x) as a reference\n      list(\n        type = \"line\", \n        x0 = 500, x1 = max(data_clean$men_median_weekly_earnings, na.rm = TRUE), \n        y0 = 500, y1 = max(data_clean$women_median_weekly_earnings, na.rm = TRUE), \n        line = list(color = \"black\", width = 2, dash = \"dot\")\n      )\n    ),\n    annotations = list(\n      # Add annotation outside the chart\n      list(\n        x = 1.1,  # Position outside the plot area (right side)\n        y = .05,     # Position vertically at the top of the chart\n        xref = \"paper\",  # Use 'paper' to position relative to plot area\n        yref = \"paper\",  # Use 'paper' to position relative to plot area\n        text = \"---- Men Median Pay = Women Median Pay\", \n        showarrow = TRUE,\n        arrowhead = 2, \n        ax = 20, \n        ay = 0,   # Adjust arrow direction to point to the line\n        font = list(size = 12, color = \"black\")\n      )\n    )\n  )\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\ndata_long &lt;- MedianWeeklyEarningsByOccupationAggregate |&gt;\n  dplyr::select(occupation, men_median_weekly_earnings, women_median_weekly_earnings) |&gt;\n  pivot_longer(cols = c(men_median_weekly_earnings, women_median_weekly_earnings), \n               names_to = \"gender\", values_to = \"median_weekly_earnings\") |&gt;\n  mutate(gender = factor(gender, levels = c(\"men_median_weekly_earnings\", \"women_median_weekly_earnings\"), \n                        labels = c(\"Men\", \"Women\")))\n\n\n# Create the Cleveland dot plot with occupation descriptions on the y-axis and earnings on the x-axis\nggplot(data_long, aes(x = median_weekly_earnings, y = occupation, color = gender)) +\n  geom_point(size = 2) +  # Use points to create the dot plot\n  scale_color_manual(values = c(\"blue\", \"pink\")) +  # Assign colors for men and women\n  labs(title = \"Median Weekly Earnings by Occupation (Men vs. Women)\",\n       x = \"Median Weekly Earnings ($)\",\n       y = \"Occupation\",\n       color = \"Gender\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 8),  # Adjust y-axis labels for readability\n        axis.title.x = element_text(size = 10),  # Optional: adjust the x-axis title size\n        axis.title.y = element_text(size = 10),  # Optional: adjust the y-axis title size\n        legend.position = \"top\")  # Position legend at the top\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Reshape the data to long format\ndata_long &lt;- MedianWeeklyEarningsByOccupationAggregate %&gt;%\n  dplyr::select(occupation, men_median_weekly_earnings, women_median_weekly_earnings) %&gt;%\n  gather(key = \"gender\", value = \"median_weekly_earnings\", men_median_weekly_earnings, women_median_weekly_earnings) %&gt;%\n  mutate(gender = factor(gender, levels = c(\"men_median_weekly_earnings\", \"women_median_weekly_earnings\"), \n                        labels = c(\"Men\", \"Women\")))\n\n# Create the bar plot\nggplot(data_long, aes(x = occupation, y = median_weekly_earnings, fill = gender)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8), width = 0.7) +\n  scale_fill_manual(values = c(\"blue\", \"pink\")) +  # Assign colors for men and women\n  labs(title = \"Median Weekly Earnings by Occupation (Men vs. Women)\",\n       x = \"Occupation\",\n       y = \"Median Weekly Earnings ($)\",\n       fill = \"Gender\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Rotate x-axis labels for readability\n        legend.position = \"top\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Prepare the data\ndata_clean &lt;- MedianWeeklyEarningsByOccupation |&gt;\n  filter(total_number_of_workers &gt;= 15, \n         !is.na(men_median_weekly_earnings) & !is.na(women_median_weekly_earnings))\n\n# Calculate total earnings by multiplying median weekly earnings by the number of workers\ndata_clean &lt;- data_clean %&gt;%\n  mutate(men_total_earnings = men_median_weekly_earnings * men_number_of_workers,\n         women_total_earnings = women_median_weekly_earnings * women_number_of_workers)\n\n# Reshape the data to long format for stacking\ndata_long &lt;- data_clean %&gt;%\n  dplyr::select(occupation, occupation_group_major, men_total_earnings, women_total_earnings) %&gt;%\n  pivot_longer(cols = c(men_total_earnings, women_total_earnings),\n               names_to = \"gender\",\n               values_to = \"total_earnings\") %&gt;%\n  mutate(gender = recode(gender, \n                        \"men_total_earnings\" = \"Men\", \n                        \"women_total_earnings\" = \"Women\"))\n\n# Create stacked bar chart with color by major occupation group\nggplot(data_long, aes(x = gender, y = total_earnings, fill = occupation_group_major)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(title = \"Total Earnings by Gender and Occupation Group\",\n       x = \"Gender\",\n       y = \"Total Earnings ($)\") +\n  scale_fill_brewer(palette = \"Set3\") +  # Use a color palette for different occupation groups\n  theme_minimal() +\n  theme(legend.position = \"right\")  # Place the legend to the right\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Assuming 'MedianWeeklyEarningsByOccupation' is your data frame, first filter for legal occupations\nlegal_data &lt;- MedianWeeklyEarningsByOccupation %&gt;%\n  filter(occupation_group == \"Legal occupations\") %&gt;%\n  dplyr::select(occupation, \n         total_number_of_workers, \n         total_median_weekly_earnings, \n         men_number_of_workers, \n         men_median_weekly_earnings, \n         women_number_of_workers, \n         women_median_weekly_earnings)\n\n# Clean the data (remove commas and convert to numeric where needed)\nlegal_data &lt;- legal_data %&gt;%\n  mutate(\n    men_median_weekly_earnings = as.numeric(gsub(\",\", \"\", men_median_weekly_earnings)),\n    women_median_weekly_earnings = as.numeric(gsub(\",\", \"\", women_median_weekly_earnings)),\n    men_number_of_workers = as.numeric(gsub(\",\", \"\", men_number_of_workers)),\n    women_number_of_workers = as.numeric(gsub(\",\", \"\", women_number_of_workers))\n  )\n\n# Calculate the pay gap ratio (women's earnings divided by men's earnings)\nlegal_data$pay_gap_ratio &lt;- legal_data$women_median_weekly_earnings / legal_data$men_median_weekly_earnings\n\n# Create a plot comparing the pay gap ratio for all occupations, including legal ones\nggplot(legal_data, aes(x = occupation, y = pay_gap_ratio, fill = \"Pay Gap Ratio\")) +\n  geom_bar(stat = \"identity\", width = 0.7, fill = \"purple\") +\n  geom_hline(yintercept = 0.77, linetype = \"dashed\", color = \"red\", size = 1) +  # 77% pay gap line\n  labs(title = \"Pay Gap Ratio by Occupation\",\n       x = \"Occupation\",\n       y = \"Pay Gap Ratio (Women to Men)\",\n       fill = \"Pay Gap Ratio\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Rotate x-axis labels for readability\n        legend.position = \"none\") +\n  coord_flip()  # Flip coordinates for better readability of occupation names\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringr)\n\n\n# Reshape the data to long format\ndata_long &lt;- MedianWeeklyEarningsByOccupationAggregate %&gt;%\n  dplyr::select(occupation, men_number_of_workers, women_number_of_workers, men_median_weekly_earnings, women_median_weekly_earnings) %&gt;%\n  pivot_longer(cols = c(men_number_of_workers, women_number_of_workers, men_median_weekly_earnings, women_median_weekly_earnings), \n               names_to = \"variable\", values_to = \"value\") %&gt;%\n  mutate(gender = case_when(\n    str_detect(variable, \"women\") ~ \"Women\",\n    str_detect(variable, \"men\") ~ \"Men\"\n  ),\n  variable = case_when(\n    str_detect(variable, \"number_of_workers\") ~ \"Number of Workers\",\n    str_detect(variable, \"median_weekly_earnings\") ~ \"Median Weekly Earnings\"\n  ))\n\n# Plot with both number of workers and median weekly earnings\nggplot(data_long, aes(x = value, y = occupation, color = gender)) +\n  geom_point(size = 4) +\n  facet_wrap(~ variable, scales = \"free_x\") +  # Separate by the variable (Workers vs Earnings)\n  scale_color_manual(values = c(\"blue\", \"pink\")) +\n  labs(title = \"Number of Workers and Median Weekly Earnings by Occupation (Men vs Women)\",\n       x = \"Value\", \n       y = \"Occupation\",\n       color = \"Gender\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 8))  # Adjust y-axis labels for readability\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Pivot data into long format\ndata_long &lt;- MedianWeeklyEarningsByOccupationAggregate %&gt;%\n  dplyr::select(occupation, men_number_of_workers, women_number_of_workers) %&gt;%\n  pivot_longer(cols = c(men_number_of_workers, women_number_of_workers),\n               names_to = \"gender\", values_to = \"number_of_workers\") %&gt;%\n  mutate(gender = factor(gender, levels = c(\"men_number_of_workers\", \"women_number_of_workers\"), \n                        labels = c(\"Men\", \"Women\")))\n\n\nggplot(data_long) +\n  geom_mosaic(aes(x = product(occupation), fill = gender, weight = number_of_workers)) +\n  scale_fill_manual(values = c(\"blue\", \"hotpink\")) +\n  labs(title = \"Distribution of Workers by Occupation and Gender\",\n       x = \"Occupation\",\n       y = \"Proportion of Workers\",\n       fill = \"Gender\") +\n  theme_minimal() +\n  coord_flip()\n\n\nWarning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2\n3.5.0.\n\n\nWarning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0.\nℹ Please use the `transform` argument instead.\n\n\nWarning: `unite_()` was deprecated in tidyr 1.2.0.\nℹ Please use `unite()` instead.\nℹ The deprecated feature was likely used in the ggmosaic package.\n  Please report the issue at &lt;https://github.com/haleyjeppson/ggmosaic&gt;.\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n\ndata &lt;- MedianWeeklyEarningsByOccupationAggregate\n\n# Calculate the pay gap ratio (women's earnings divided by men's earnings)\ndata$pay_gap_ratio &lt;- data$women_median_weekly_earnings / data$men_median_weekly_earnings\n\n# Create a plot comparing the pay gap ratio for all occupations, including legal ones\nggplot(data, aes(x = occupation, y = pay_gap_ratio, fill = \"Pay Gap Ratio\")) +\n  geom_bar(stat = \"identity\", width = 0.7, fill = \"purple\") +\n  geom_hline(yintercept = 0.77, linetype = \"dashed\", color = \"red\", size = 1) +  # 77% pay gap line\n  labs(title = \"Pay Gap Ratio by Occupation\",\n       x = \"Occupation\",\n       y = \"Pay Gap Ratio (Women to Men)\",\n       fill = \"Pay Gap Ratio\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Rotate x-axis labels for readability\n        legend.position = \"none\") +\n  coord_flip()  # Flip coordinates for better readability of occupation names\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\nlibrary(grid)\n\n\n# Reshape the data into a long format\natus_long &lt;- atusAllGroups2023 %&gt;%\n  pivot_longer(cols = starts_with(\"AnyChildren\") | starts_with(\"NoChildren\"), \n               names_to = \"Group_Gender\", values_to = \"Time\") %&gt;%\n  separate(Group_Gender, into = c(\"Group\", \"Gender\"), sep = \"_\") %&gt;%\n  filter(Gender %in% c(\"Men\", \"Women\")) %&gt;%\n  mutate(Group = factor(Group, levels = c(\"AnyChildrenUnder18\", \"NoChildren\")),\n         Gender = factor(Gender, levels = c(\"Men\", \"Women\")),\n         Major_Activity_Group = factor(Major_Activity_Group, levels = unique(Major_Activity_Group)),\n         Activity = factor(Activity, levels = unique(Activity))) %&gt;%\n  # Sum the time by Major_Activity_Group for each Group and Gender\n  group_by(Major_Activity_Group, Group, Gender) %&gt;%\n  summarise(Total_Time = sum(Time, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  # Normalize the total time to 24 hours\n  group_by(Group, Gender) %&gt;%\n  mutate(Time = Total_Time / sum(Total_Time) * 24) %&gt;%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Major_Activity_Group', 'Group'. You can\noverride using the `.groups` argument.\n\n\nCode\natus_long &lt;- atus_long %&gt;%\n  mutate(Group_Gender = factor(interaction(Group, Gender), \n                               levels = c(\"NoChildren_Men\", \"NoChildren_Women\", \"AnyChildrenUnder18_Men\", \"AnyChildrenUnder18_Women\")))\n\n# Calculate percentages for each stacked segment\natus_long &lt;- atus_long %&gt;%\n  group_by(Group_Gender) %&gt;%\n  mutate(Percentage = Time / sum(Time) * 100) %&gt;%\n  ungroup()\n\n\n# Create a horizontal stacked bar chart with ggplot2\nggplot(atus_long, aes(x = Time, y = interaction(Gender, Group), fill = Major_Activity_Group)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_brewer(palette = \"Set3\") +  # Color palette for the activities\n  labs(x = \"Time (hours)\", y = \"Group & Gender\", title = \"Time Spent by Activity (24-Hour Breakdown)\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(angle = 0),  # Keep y-axis labels horizontal\n        legend.position = \"bottom\") +\n  scale_y_discrete(labels = c(\"Men, Children Under 18\", \"Women, Children Under 18\",\n                              \"Men, No Children\", \"Women, No Children\")) +\n  guides(fill = guide_legend(title = \"Activity\")) +\n  # Set the x-axis limit to 24 hours and ensure the last label is 24\n  scale_x_continuous(breaks = seq(0, 24, by = 4), limits = c(0, 24.01), expand = c(0, 0)) +\n  # Add percentages to each segment\n  geom_text(aes(label = paste0(round(Percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5), color = \"black\", size = 3)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Reshape data for plotting\ndata_long &lt;- MedianWeeklyEarningByPresenceOfChildren %&gt;%\n  mutate(Marital_Status = factor(Marital_Status),\n         Characteristic = factor(Characteristic, levels = c(\"Total\", \"With children under 18 years old\", \"With children 6 to 17 none younger\", \"With children under 6 years old\", \"With no children under 18 years old\"))) %&gt;%\n  pivot_longer(cols = c(Median_weekly_earnings), names_to = \"earnings\", values_to = \"value\")\n\n# Plot using ggplot\nggplot(data_long, aes(x = Characteristic, y = value, fill = Gender)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~ Marital_Status) +\n  labs(title = \"Median Weekly Earnings by Gender, Marital Status, and Presence of Children\",\n       x = \"Characteristic (Children Status)\",\n       y = \"Median Weekly Earnings ($)\",\n       fill = \"Gender\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Assuming the data is loaded into `MedianWeeklyEarningsByPresenceOfChildren`\ndata &lt;- MedianWeeklyEarningByPresenceOfChildren\n\nwomen_data &lt;- data %&gt;%\n  filter(Gender == \"Women\") %&gt;%\n  select(Marital_Status, Characteristic, women_median_weekly_earnings = Median_weekly_earnings)\n\nmen_data &lt;- data %&gt;%\n  filter(Gender == \"Men\") %&gt;%\n  select(Marital_Status, Characteristic, men_median_weekly_earnings = Median_weekly_earnings)\n\n# Join women and men data by Marital_Status and Characteristic\nmerged_data &lt;- left_join(women_data, men_data, by = c(\"Marital_Status\", \"Characteristic\"))\n\n# Calculate women's earnings as a percentage of men's earnings\nmerged_data &lt;- merged_data %&gt;%\n  mutate(women_as_percent_of_men = (women_median_weekly_earnings / men_median_weekly_earnings) * 100)\n\n# Remove rows with missing data (if any)\nmerged_data &lt;- merged_data %&gt;%\n  filter(!is.na(women_as_percent_of_men))\n\n# Plot: Women's Earnings as a Percentage of Men's Earnings by Children Status, without legend and with simplified x-axis\nggplot(merged_data, aes(x = Characteristic, y = women_as_percent_of_men, fill = Characteristic)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", show.legend = FALSE) +  # Remove legend\n  geom_text(aes(label = paste0(round(women_as_percent_of_men, 1), \"%\")), \n            vjust = 1.5, color = \"white\", fontface = \"bold\", size=3) +  # Add percentage labels\n  labs(\n    title = \"Women's Median Weekly Earnings as Percentage of Men's Earnings by Children Status\",\n    x = \"Children Status\",\n    y = \"Women's Earnings as % of Men's Earnings\"\n  ) +\n  scale_x_discrete(labels = function(x) gsub(\":\", \"\\n\", x)) +  # Add line breaks in x-axis labels\n  theme_minimal() +  # Clean theme\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better visibility\n        axis.ticks.x = element_blank(),  # Hide x-axis ticks\n        axis.title.x = element_text(size = 12),  # Set title size for x-axis\n        axis.title.y = element_text(size = 12),  # Set title size for y-axis\n        legend.position = \"none\") +  # Ensure no legend is shown\n  facet_wrap(~ Marital_Status, scales = \"free_y\")\n\n\n\n\n\n\n\n\n\n\n\nCode\ndata &lt;- MedianWeeklyEarningsByMaritalStatus\n  \n# Calculate women's earnings as a percentage of men's earnings\ndata$women_as_percent_of_men = (data$women_median_weekly_earnings / data$men_median_weekly_earnings) * 100\n\n# Plot: Women's Earnings as a Percentage of Men's Earnings with Labels\nggplot(data, aes(x = MaritalStatus, y = women_as_percent_of_men, fill = MaritalStatus)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  geom_text(aes(label = paste0(round(women_as_percent_of_men, 1), \"%\")), \n            vjust = 1.5, color = \"white\", fontface = \"bold\") +  # Add '%' and adjust label position\n  labs(\n    title = \"Women's Median Weekly Earnings as Percentage of Men's Earnings by Marital Status\",\n    x = \"Marital Status\",\n    y = \"Women's Earnings as % of Men's Earnings\"\n  ) +\n  theme_grey() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]