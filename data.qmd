# Data


## Description

For this project, we will draw on several key datasets from the U.S. Bureau of Labor Statistics (BLS). BLS is a federal agency that collects and disseminates various data about the U.S. economy and labor market.

The main dataset we will use comes out of the **Current Population Survey (CPS)**. The CPS is a monthly survey conducted by the U.S. Census Bureau on behalf of the BLS, collecting data from approximately 60,000 eligible households across the United States. It provides detailed information on employment, earnings, demographic characteristics, and other labor market factors. Data is gathered through household interviews using a rotating panel design to ensure both consistency and coverage of the U.S. civilian noninstitutional population aged 16 and older. The CPS data includes a rich set of variables, such as employment status, wages, hours worked, and demographic factors like gender, ethnicity, and family structure [(https://www.bls.gov/cps/earnings-faqs.htm#blscensus)](https://www.bls.gov/cps/earnings-faqs.htm#blscensus). The data we are looking at is aggregated yearly.

We will also use data from the the **American Time Use Survey (ATUS)**. ATUS is a national survey conducted by BLS that collects data on how people aged 15 and older allocate their time across various activities, such as work, leisure, and household chores, through a 24-hour time diary recall to better understand patterns of time use across different demographic groups. This is also aggregated yearly at [(https://www.bls.gov/tus/documents.htm)](https://www.bls.gov/tus/documents.htm)

Both datasets several limitations, including nonresponse bias, misclassification of employment status, and recall bias due to reliance on self-reporting. Additionally, CPS struggles with accurately capturing nontraditional employment, has limited detail on job quality, and may be affected by changes in methodology and question design over time, which complicates long-term comparisons.

These datasets are both available through the BLS data finder [(https://www.bls.gov/data/tools.htm)](https://www.bls.gov/data/tools.htm).
We have decided to save the data from the BLS site as CSVs and import into R for this project.


## Missing value analysis


```{r}
# Add libraries and read in data
library(readr)
library(dplyr)
library(naniar)   # For missing data visualization and summaries
library(visdat)
library(ggplot2)


atusAllGroups2023 <- read_csv("data/atusAllGroups2023.csv", show_col_types = FALSE)

MedianWeeklyEarningByPresenceOfChildren <- read_csv("data/MedianWeeklyEarningByPresenceOfChildrenTable7.csv", show_col_types = FALSE)
MedianWeeklyEarningByRace <- read_csv("data/MedianWeeklyEarningByRaceTable18.csv", show_col_types = FALSE)
MedianWeeklyEarningsByGenderEducation <- read_csv("data/MedianWeeklyEarningsByGenderEducationTable24.csv", show_col_types = FALSE)
MedianHourlyEarningsHispanicByAge <- read_csv("data/MedianHourlyEarningsHispanicByAgeTable25.csv", show_col_types = FALSE)
MedianHoursWorkedByRaceGender <- read_csv("data/MedianHoursWorkedByRaceGenderTable26.csv", show_col_types = FALSE)

MedianWeeklyEarningsByOccupation <- read_csv("data/MedianWeeklyEarningsByOccupation.csv", show_col_types = FALSE)
MedianWeeklyEarningsByOccupationAggregate <- read_csv("data/MedianWeeklyEarningsByOccupationAggregate.csv", show_col_types = FALSE)

MedianWeeklyEarningsByMaritalStatus <- read_csv("data/MedianWeeklyEarningsByMaritalStatus.csv", show_col_types = FALSE)

```
```{r}
occupationsByYear <- read_csv("data/occupationsByYear.csv", show_col_types = FALSE)

library(dplyr)

# Clean leading dots in occupation names
data <- occupationsByYear %>%
  mutate(Occupation = gsub("^\\.+", "", Occupation))

# Top 15 most common jobs for women
top_women_jobs <- data %>%
  group_by(Year) %>%
  arrange(desc(Women_Number)) %>%
  slice_head(n = 15) %>%
  mutate(Gender = "Women")

# Top 15 most common jobs for men
top_men_jobs <- data %>%
  group_by(Year) %>%
  arrange(desc(Men_Number)) %>%
  slice_head(n = 15) %>%
  mutate(Gender = "Men")

total_jobs <- data %>%
  group_by(Year) %>%
  arrange(desc(Total_Number)) %>%
  slice_head(n = 10)

total_jobs
write.csv(total_jobs, "top_jobs_by_gender.csv", row.names = FALSE)


# Combine the two datasets
combined_jobs <- bind_rows(top_women_jobs, top_men_jobs)

# Print the combined dataframe
print(combined_jobs)
combined_jobs <- combined_jobs %>% mutate(across(where(is.numeric) & !starts_with("Year"), 
                ~ ifelse(Year %in% c(2020, 2023), . * 1000, .)))


# Save the combined dataframe to a CSV file
write.csv(combined_jobs, "top_jobs_by_gender.csv", row.names = FALSE)


```

```{r}
library(dplyr)

# Read the CSV file
df <- read.csv("top_jobs_by_gender.csv")

# Clean up the data (remove commas and convert to numeric)
df_cleaned <- df %>%
  mutate(
    Total_Number = as.numeric(gsub(",", "", Total_Number)),
    Men_Number = as.numeric(gsub(",", "", Men_Number)),
    Women_Number = as.numeric(gsub(",", "", Women_Number)),
    Total_MedianEarnings = as.numeric(gsub(",", "", Total_MedianEarnings)),
    Men_MedianEarnings = as.numeric(gsub(",", "", Men_MedianEarnings)),
    Women_MedianEarnings = as.numeric(gsub(",", "", Women_MedianEarnings))
  )

# Group by Year and Occupation, and calculate the total number of people for each job
df_grouped <- df_cleaned %>%
  group_by(Year, Occupation) %>%
  summarise(
    men=sum(Men_Number, na.rm = TRUE),
    women=sum(Women_Number, na.rm = TRUE),
    median_income = mean(Total_MedianEarnings, na.rm = TRUE), # Calculate median income
    .groups = "drop"
  )


```


```{r}
library(dplyr)
library(jsonlite)


total_jobs

df_grouped <- total_jobs %>%
  mutate(
    men = Men_Number,     # Assuming 'Total_Men' is the column for the number of men
    women = Women_Number,  # Assuming 'Total_Women' is the column for the number of women
    median_income = Total_MedianEarnings  # Assuming 'Total_MedianEarnings' is the column for median income
  )

# Save the data as JSON file
write_json(df_grouped, "output_data.json")

```




```{r}
library(patchwork)

ATUS2023Missing <- gg_miss_var(atusAllGroups2023) + ggtitle("ATUS2023") + theme(plot.title = element_text(size = 7, hjust = 0.5))

MedianWeeklyEarningByPresenceOfChildrenMissing <- gg_miss_var(MedianWeeklyEarningByPresenceOfChildren) + ggtitle("MedianWeeklyEarningByPresenceOfChildrenMissing") + theme(plot.title = element_text(size = 7, hjust = 0.5))

MedianWeeklyEarningByRaceMissing <- gg_miss_var(MedianWeeklyEarningByRace) + ggtitle("MedianWeeklyEarningByRace") + theme(plot.title = element_text(size = 7, hjust = 0.5))

MedianWeeklyEarningsByGenderEducationMissing <- gg_miss_var(MedianWeeklyEarningsByGenderEducation) + ggtitle("MedianWeeklyEarningsByGenderEducationMissing") + theme(plot.title = element_text(size = 7, hjust = 0.5))

MedianHourlyEarningsHispanicByAgeMissing <- gg_miss_var(MedianHourlyEarningsHispanicByAge) + ggtitle("MedianHourlyEarningsHispanicByAgeMissing") + theme(plot.title = element_text(size = 7, hjust = 0.5))

MedianHoursWorkedByRaceGenderMissing <- gg_miss_var(MedianHoursWorkedByRaceGender) + ggtitle("MedianHoursWorkedByRaceGender") + theme(plot.title = element_text(size = 7, hjust = 0.5))

firstThird <- (ATUS2023Missing | MedianWeeklyEarningByPresenceOfChildrenMissing)
secondThird <- (MedianWeeklyEarningByRaceMissing | MedianWeeklyEarningsByGenderEducationMissing)
thirdThird <- (MedianHourlyEarningsHispanicByAgeMissing | MedianHoursWorkedByRaceGenderMissing)

( firstThird/ secondThird/ thirdThird) + plot_annotation(title="Missing Value Frequencies Across Datasets in Use")
```

`gg_miss_var`can help us visualize the frequency of missing data.
For most datasets we see no missing data. The exception is for the MedianWeeklyEarningByRace and MedianHoursWorkedByRaceGender sets.
Below, we plot this out and see BLS only started including the Asian group in the Current Population Survey in 2000, vs started with the rest in 1979.


```{r}
# Plot "Asian" variable by "Year"
ggplot(MedianWeeklyEarningByRace, aes(x = Year, y = Asian)) +
  geom_line(color = "blue", size = 1) +  # Line plot, blue color
  geom_point(color = "red") +             # Optional: Add points for each year
  labs(title = "Median Weekly Earnings for Asian Group by Year",
       x = "Year",
       y = "Median Weekly Earnings (Asian)") +
  theme_minimal()


ggplot(MedianHoursWorkedByRaceGender, aes(x = Year, y = Asian)) +
  geom_line(color = "blue", size = 1) +  # Line plot, blue color
  geom_point(color = "red") +             # Optional: Add points for each year
  labs(title = "Median Hours Worked By for Asian Group By Year",
       x = "Year",
       y = "Median Hours Worked (Asian)") +
  theme_minimal()
```


